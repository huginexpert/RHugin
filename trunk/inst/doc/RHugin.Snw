\documentclass[11pt]{article}
\usepackage{geometry}
\geometry{a4paper, text={17cm, 24cm}}
\usepackage[parfill]{parskip}
\usepackage{subfig}
\usepackage{multirow}
\usepackage{natbib}
\usepackage{Sweave}
\usepackage{color}
\usepackage{hyperref}

\hypersetup{
  colorlinks = {true},
  linktocpage = {true},
  plainpages = {false},
  linkcolor = {blue},
  citecolor = {blue},
  urlcolor = {red},
  pdfstartview = {Fit},
  pdfpagemode = {},
  pdfview = {XYZ null null null}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% useful stuff from for jss.cls %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\pkg}[1]{{\fontseries{b}\selectfont #1}}
\newcommand{\Prob}{\mathsf{P}}
\let\proglang=\textsf
\let\code=\texttt

%\VignetteIndexEntry{The RHugin Package User's Guide}

\begin{document}

\hrule
\vspace{1em}
\begin{center}
{\Huge The RHugin Package User's Guide} \\
\vspace{1em}
Kjell Konis
\end{center}
\vspace{2em}
\hrule

\vspace{3em}
\tableofcontents

\newpage
\section[The RHugin package]{The \pkg{RHugin} package}

Hugin \citep{hugin} is a software tool for working with Bayesian networks and decision graphs.  The core of Hugin is the Hugin Decision Engine\textsuperscript{\textregistered} (HDE), the software library that performs the probability calculations.  Hugin provides two interfaces for the HDE: a user-friendly GUI and a set of APIs (\proglang{C}, \proglang{C++}, \proglang{Java}, \proglang{C\#}).  The \pkg{RHugin} package provides an HDE API for the \proglang{R} environment for statistical computing \citep{R}.  \proglang{R} is an open source project that has become increasingly popular in the field of academic statistics (as well as in many others).  In contrast to the official HDE APIs, the HDE API for \proglang{R} allows the HDE to be used in an interpreted environment.  Hence it provides the same capacity for tinkering with Bayesian networks as the Hugin GUI, while also providing the precise control of the HDE permitted by the APIs.  Since it is still the HDE that does all of the calculations, the performance penalty for this added flexibility is minimal.

This user's guide assumes that the reader is already somewhat proficient with \proglang{R} \citep{R} and with Bayesian networks (see, for example, \cite{fj2001}; an in-depth treatment of Bayesian networks can be found in \cite{cdls1999}).  Some experience with the Hugin GUI would also be helpful.

The user's guide is organized as follows.  Section \ref{sec:start} discusses installing Hugin and the \pkg{RHugin} package.  Section \ref{sec:bn} demonstrates how to build and make inference from a simple Bayesian network. Finally, section \ref{sec:sens} shows how to use the \pkg{RHugin} package to access the sensitivity analysis features available in the HDE.

\section[Getting started]{Getting started}
\label{sec:start}

The \pkg{RHugin} package provides an interface linking the Hugin Decision Engine\textsuperscript{\textregistered} (HDE) and~\proglang{R}, hence it will not be terribly useful unless both the HDE and \proglang{R} are installed on the computer.  The HDE is a component of \emph{Hugin Developer} (for commercial use) and \emph{Hugin Researcher} (for academic use).  Both of these programs are available from Hugin Expert A/S

\vspace{9pt}
\hspace{1em}
\htmladdnormallink{http://www.hugin.com}{http://www.hugin.com}
\vspace{9pt}

for Microsoft Windows\textsuperscript{\textregistered}, SUN Solaris\textsuperscript{\textregistered}, Linux (Red Hat Enterprise 4 and compatible distributions) and Apple Macintosh OS X\textsuperscript{\textregistered} platforms.  Hugin Expert A/S also provides a trial version called \emph{Hugin Lite} --- its capabilities are limited but sufficient for evaluating the \pkg{RHugin} package.  You must have at least one of these three programs (i.e., Hugin Developer, Hugin Researcher, or Hugin Lite) installed on your computer in order to use the \pkg{RHugin} package.


\subsection[Installing the RHugin package]{Installing the \pkg{RHugin} package}

The \pkg{RHugin} website on R-Forge \citep{R-Forge}

\vspace{9pt}
\hspace{1em}
\htmladdnormallink{http://rhugin.r-forge.r-project.org}{http://rhugin.r-forge.r-project.org}
\vspace{9pt}

contains instructions for installing the \pkg{RHugin} package and, optionally, the \pkg{Rgraphviz} package.  Once the \pkg{RHugin} package is installed, run the command

<<>>=
library(RHugin)
@

to load it into your \proglang{R} session.


\subsection{Getting help}

All of the functions provided in the \pkg{RHugin} package are documented using \proglang{R}'s built-in help system.  For example, the following command will display the help file for the \texttt{hugin.domain} function.

<<eval=FALSE>>=
help(hugin.domain)
@

A complete list of functions can be obtained using the \texttt{ls} function.

<<eval=FALSE>>=
ls("package:RHugin")
@

Also, since the \pkg{RHugin} package is a wrapper for the Hugin Decision Engine\textsuperscript{\textregistered}'s \proglang{C} API, the Hugin API Reference Manual \citep{CAPI} can also serve as a reference.  The \pkg{RHugin} documentation lists which \proglang{C} API calls are used to implement each \pkg{RHugin} function. 


\section{Bayesian networks}
\label{sec:bn}

The \emph{Building Bayesian Networks} tutorial, available in the Tutorials section of the Hugin website,

\vspace{9pt}
\hspace{1em}
\htmladdnormallink{http://www.hugin.com/developer/tutorials}{http://www.hugin.com/developer/tutorials}
\vspace{9pt}

shows how to build a simple Bayesian network using the Hugin GUI.  This section works through the same example using the \pkg{RHugin} package.  If you are not already familiar with this tutorial, we recommend you work through it using the Hugin GUI before proceeding.

The goal of this tutorial is to diagnose an apple tree that is losing its leaves.  The two possible causes under consideration are (1) the tree is sick and (2) the tree is too dry.  The relevant conditional probability tables are given in Table~\ref{tab:cpt}.  Given that the tree is observed to be losing its leaves, the Bayesian network will be used to compute revised probabilities for the tree being sick and too dry.

\subsection{Building the Bayesian network}
\label{sec:apple}

The first step is to create a new (empty) domain using the \texttt{hugin.domain} function.  We call our domain \texttt{apple}.

<<>>=
apple <- hugin.domain()
@

We are now ready to add nodes and edges to the \texttt{apple} domain and use it for inference.

\subsubsection{Specifying the structure of the Bayesian network}

Next, we use the \texttt{add.node} function to add nodes for the variables \emph{Sick}, \emph{Dry} and \emph{Loses}.  Each node has two states, namely \emph{yes} and \emph{no}.  These states can be specified when the node is created using the optional \texttt{states} argument.

<<>>=
add.node(apple, "Sick", states = c("yes", "no"))
add.node(apple, "Dry", states = c("yes", "no"))
add.node(apple, "Loses", states = c("yes", "no"))
@

Note the syntax of the \texttt{add.node} function; particularly that the first argument is the domain that \texttt{add.node} will act on.  This paradigm holds for most of the functions in the \pkg{RHugin} package.  Further, it is not necessary to assign the output of \texttt{add.node}.  The functions in the \pkg{RHugin} package automatically keep the domain up-to-date.

Next, we use the \texttt{add.edge} function to add directed edges from \emph{Sick} to \emph{Loses} and from \emph{Dry} to \emph{Loses}.

<<>>=
add.edge(apple, "Loses", "Dry")
add.edge(apple, "Loses", "Sick")
@

The structure of the Bayesian network is now complete.  We can take a look at the \texttt{apple} network using the \texttt{plot} method

<<eval=FALSE>>=
plot(apple)
@

which uses the \pkg{Rgraphviz} \citep{Rgraphviz} package to layout and render the network.  The plot is shown in Figure~\ref{subfig:RHugin}.  Figure~\ref{subfig:HuginGUI} shows the same network displayed in the Hugin GUI.

\begin{figure}[t]
\setkeys{Gin}{width=60mm}
\centering
\subfloat[The \texttt{apple} domain rendered by the \pkg{RHugin} plot method. \label{subfig:RHugin}]{
<<fig=TRUE,echo=FALSE,height=3,width=3>>=
plot(apple)
@
}
\hspace{10mm}
\subfloat[The \texttt{apple} domain viewed in the Hugin GUI.\label{subfig:HuginGUI}]{
%\includegraphics[width=60mm, trim=0mm -3mm 0mm 0mm, clip]{Hugin_GUI_AT.pdf}
\includegraphics[width=60mm, trim=0mm -3mm 0mm 0mm, clip]{H.pdf}
}
\caption{The \texttt{apple} domain viewed in \proglang{R} and in the Hugin GUI.\label{fig:plot}}
\setkeys{Gin}{width=0.8\textwidth}
\end{figure}


\begin{table}[t]
\centering
\subfloat[Sick\label{subtab:CPTSick}]{
\begin{tabular}{|l|r|} \hline
\emph{Sick} = yes & 0.1 \\ \hline
\emph{Sick} = no & 0.9 \\ \hline
\end{tabular}
} \hspace{20mm}
\subfloat[Dry\label{subtab:CPTDry}]{
\begin{tabular}{|l|r|} \hline
\emph{Dry} = yes & 0.1 \\ \hline
\emph{Dry} = no & 0.9 \\ \hline
\end{tabular}
} \\
\subfloat[Dry\label{subtab:CPTLoses}]{
\begin{tabular}{|l|c|c|c|c|} \hline
 & \multicolumn{2}{|c|}{\emph{Dry} = yes} & \multicolumn{2}{|c|}{\emph{Dry} = no} \\ \hline
 & \emph{Sick} = yes & \emph{Sick} = no & \emph{Sick} = yes & \emph{Sick} = no \\ \hline
\emph{Loses} = yes & 0.95 & 0.85 & 0.90 & 0.02 \\ \hline
\emph{Loses} = no  & 0.05 & 0.15 & 0.10 & 0.98 \\ \hline
\end{tabular}
}
\caption{The conditional probability tables for the \emph{Building a Bayesian Network} tutorial.\label{tab:cpt}}
\end{table}


\subsubsection{Specifying the conditional probability tables in the Bayesian network}

After the structure of the network has been specified, the conditional probability tables (CPTs) can be filled in.  The contents of a node's CPT depend on the states of the node and on the states of its parents.  Since the arrangement of the CPT can get quite complicated, it is recommended that users start with a copy of the CPT obtained from the Hugin Decision Engine\textsuperscript{\textregistered} (HDE) which will have the proper arrangement.  A copy of the CPT can be obtained using the \texttt{get.table} function.

<<>>=
sick.table <- get.table(apple, "Sick")
@

The conditional probability table is stored in \proglang{R} as a data frame containing a factor variable listing the states of the node and a numeric variable \texttt{Freq} giving the probability (or frequency) of each state.  Initially, all of these values are set to $1$.  Note that the values in the \texttt{Freq} column do not need to sum to one, the HDE automatically normalizes them as necessary.

<<>>=
sick.table
@

Proceed by changing the probabilities in the \texttt{Freq} column of \texttt{sick.table} to match those given in Table~\ref{subtab:CPTSick}, then use the \texttt{set.table} function to set the CPT for the node \emph{Sick} in the \texttt{apple} domain.

<<>>=
sick.table[["Freq"]] <- c(0.1, 0.9)
set.table(apple, "Sick", sick.table)
@

Lastly, just to be safe, use the \texttt{get.table} function to verify that the conditional probability table for the node \emph{Sick} has been properly set in the \texttt{apple} domain.

<<>>=
get.table(apple, "Sick")
@

Repeat these steps to set the conditional probability table for the node \emph{Dry}.

<<>>=
dry.table <- get.table(apple, "Dry")
dry.table[["Freq"]] <- c(0.1, 0.9)
set.table(apple, "Dry", dry.table)
@

The data frame representing the conditional probability table for the node \emph{Loses} is slightly more complicated.  It contains three factor variables: the first for \emph{Loses} itself, a second for the parent \emph{Dry}, and a third for the parent \emph{Sick}, so that all $8$ cells shown in Table~\ref{subtab:CPTLoses} are present.

<<>>=
loses.table <- get.table(apple, "Loses")
loses.table
@

As before, enter the appropriate values from Table~\ref{subtab:CPTLoses} in the \texttt{Freq} column of \texttt{loses.table}, then set the table in the \texttt{apple} domain.

<<>>=
loses.table[["Freq"]] <- c(0.95, 0.05, 0.90, 0.10, 0.85, 0.15, 0.02, 0.98)
set.table(apple, "Loses", loses.table)
@

Again, verify that the conditional probability table was properly set using the \texttt{get.table} function.  The optional \texttt{class} argument can be used to retrieve the CPT in different formats.  Using \code{class = "ftable"}, for example, returns the CPT as a flat contingency table (class \texttt{ftable} in \proglang{R}) arranged in a similar manner to Table~\ref{subtab:CPTLoses}.

<<>>=
get.table(apple, "Loses", class = "ftable")
@

\subsubsection{Saving and loading Hugin domains}

The \texttt{write.rhd} function allows a Hugin domain to be saved as either a Hugin NET file or a Hugin Knowledge Base (hkb) file.

<<eval=FALSE>>=
write.rhd(apple, file = "apple.net", type = "net")
@

Both of these formats are supported by the Hugin GUI.  Further, Bayesian networks do not need to be built in R to be used for inference via the \pkg{RHugin} package: NET and hkb files created using the Hugin GUI as well as those created using the \texttt{write.rhd} function can be loaded using the \texttt{read.rhd} function.

<<eval=FALSE>>=
apple.copy <- read.rhd("apple.net")
@


\subsection{Making inference}

A Bayesian network must be compiled before it can be used to make inference. Compilation refers to the task of triangulating the domain and computing a junction tree.

<<>>=
compile(apple)
@
 
Evidence is entered into a Hugin domain using the \texttt{set.finding} function.  In this example, the evidence is that the apple tree is losing its leaves.  Hence we enter the finding that the node \emph{Loses} is in state \emph{yes}.

<<>>=
set.finding(apple, "Loses", "yes")
@

The \texttt{propogate} function invokes the probability propagation algorithm \citep{ls1988} to compute revised beliefs given the evidence in the Hugin domain.

<<>>=
propagate(apple)
@

Finally, after evidence has been entered and propagated, the \texttt{get.beliefs} function can be used to retrieve the revised beliefs from a specified node.

<<>>=
get.belief(apple, "Sick")
get.belief(apple, "Dry")
@

We find that, given the apple tree is losing its leaves, the revised probability that the tree is sick is $0.4939956$ and the revised probability that the tree is too dry is $0.4694323$.


%\section[Initializing an RHugin domain with a data frame]{Initializing an \pkg{RHugin} domain with a data frame}

%The \pkg{RHugin} package takes advantage of \proglang{R}'s data manipulation capabilities to simplify the task of building  Bayesian networks and entering the conditional probability tables.  This capability is best demonstrated by example.  Consider the data frame \texttt{housing} provided in the MASS package \citep{MASS}.  These data originally appeared in \cite{mm1976} and show a four-way classification of 1,681 renters in Copenhagen who were surveyed on

%\begin{description}
%	\item[Sat] their level of satisfaction with the rented accomodation (levels: \emph{Low}, \emph{Medium}, \emph{High}),
%	\item[Infl] their feeling of influence on the management (levels: \emph{Low}, \emph{Medium}, \emph{High}),
%	\item[Type] the type of housing rented (levels: \emph{Tower}, \emph{Apartment}, \emph{Atrium}, \emph{Terrace}), and
%	\item[Cont] their degree of contact with other residents (levels: \emph{Low}, \emph{High}).
%\end{description}

%The data are arranged in a data frame containing the $4$ factor variables \textbf{Sat}, \textbf{Infl}, \textbf{Type}, \textbf{Cont} and a numeric variable \textbf{Freq} indicating the frequency of each combination of the factors.  We begin by loading the data into \proglang{R}.

%<<>>=
%data(housing, package = "MASS")
%@

%A data frame can be specified when calling the \texttt{hugin.domain} function via the optional \texttt{data} argument.  When the \texttt{data} argument is provided, the \texttt{hugin.domain} function creates a new domain and automatically adds one node for each variable in the data frame.  Further, \pkg{RHugin} recognizes that the variables in the \texttt{housing} data frame are factors and uses their levels to set the states of each automatically added node.  The name \code{Freq} is reserved in \pkg{RHugin} and is interpreted as the multiplicity of the corresponding combination of factor levels.  If the data frame does not contain a variable named \code{Freq} then \code{Freq = 1} is assumed.

%<<>>=
%hd <- hugin.domain(data = housing)
%@

%We can use the summary method to see the states of the automatically generated nodes.  For brevity we examine only the node \emph{Type}.

%<<>>=
%summary(hd, domain = FALSE, nodes = "Type")
%@

%Next we add the edges. The \texttt{add.edge} function accepts a vector of nodes for the \texttt{parent} argument.  When the length of \texttt{parent} is greater than one, an edge is added from each element of \texttt{parent} to the child node.

%<<>>=
%add.edge(hd, "Cont", "Type")
%add.edge(hd, "Sat", c("Cont", "Type", "Infl"))
%@

%The layout of the network is shown in Figure~\ref{fig:housing}.

%\begin{figure}[ttt]
%\centering
%<<fig=TRUE,echo=FALSE,height=3>>=
%plot(hd)
%@
%\caption{A simple Bayesian network for the housing data.\label{fig:housing}}
%\end{figure}

%Once the nodes and the structure of the network have been defined, we can enter the conditional probability tables.  Given the entire \texttt{housing} data frame as the \texttt{data} argument, the \texttt{set.table} function automatically computes the correct marginal counts for the table belonging to the specified node.  For example, since the node \emph{Cont} has parent \emph{Type}, its table is a data frame with factor variables \textbf{Cont} and \textbf{Type} and a numeric variable \textbf{Freq} containing the respective frequencies.  The \texttt{set.table} function computes each entry of the table for the node \emph{Cont} by summing all of the frequencies in the \texttt{housing} data frame corresponding to each combination of the levels of \textbf{Cont} and \textbf{Type}.  The computed table can be retrieved with the \texttt{get.table} function.

%<<>>=
%set.table(hd, "Cont", housing)
%get.table(hd, "Cont")
%@

%To set the tables for all the automatically generated nodes in the domain, we simply call \texttt{set.table} in a loop.

%<<>>=
%for(node in get.nodes(hd)) set.table(hd, node, housing)
%@

%The domain \texttt{hd} is now ready to be compiled and used for inference.

\section{Sensitivity analysis}
\label{sec:sens}

There is often a subset of the nodes in a Bayesian network that can be regarded as the \emph{input} nodes and another subset that can be regarded as the \emph{output} nodes.  Sensitivity analysis refers to the investigation of the effect of inaccuracies in the CPTs of the input nodes on the network's output nodes. The Hugin Decision Engine\textsuperscript{\textregistered} (HDE) provides the following mechanism for assessing the effect of a change in the conditional probability table of an input node on the probability of interest (the belief of a particular output node).

Let $\Prob(A = a | E)$ be the probability of interest: the probability that an output node $A$ takes state $a$ given evidence $E$ in a Bayesian network $D$.  Further, let $x = \Prob(b_{i} | \pi)$ be an element (corresponding to the state $b_{i}$) of the conditional probability table of a node $B$ in $D$ and let $\pi$ be the combination of states for the parents of $B$.  When varying $x = p(b_{i} | \pi)$, the other elements $p(b_{j} | \pi)$, $j \neq i$ in the conditional probability table  must be co-varied so that the probabilities continue to sum to one.  Each element of the conditional probability table can thus be viewed as a function $g_{j}(x)$ of the input probability $x$ that is the subject of the sensitivity analysis.  Assuming that the elements of the conditional probability table are co-varied so that their mutual proportional relationship is kept constant, we have

$$g_{j}(x) = \left\{ \begin{array}{ll} x & j = i \\ p(b_{j} | \pi) \cdot \frac{1 - x}{1 - p(b_{i} | \pi)} & j \neq i \\ \end{array} \right..$$

Given this assumption, \cite{gr2001} show that the probability of interest can be expressed as the ratio of two linear functions of $x$

\begin{equation}
\Prob(A = a | E)(x) = \frac{\alpha x + \beta}{\gamma x + \delta}
\label{eqn:sensitivity}
\end{equation}

where $\alpha$, $\beta$, $\gamma$ and $\delta$ are constants that can be computed from $D$.  The function in equation~\ref{eqn:sensitivity} is called the \emph{sensitivity function} and the parameters $\{\alpha, \beta, \gamma ,\delta\}$ can be computed using the \texttt{get.sensitivity} function in the \pkg{RHugin} package.

\subsection{Example}

\begin{figure}[t]
\centering
\includegraphics{sweavedImages/sensitivity.pdf}
\caption{A plot of the sensitivity of the computed belief $\Prob(Sick = yes | Loses = yes)$ to changes in the input probability $\Prob(Dry = yes)$. The dot indicates the computed belief for the actual input probability $\Prob(Dry = yes) = 0.1$\label{fig:sensitvity}}
\end{figure}

Recall the \texttt{apple} domain.  Suppose we wish to investigate the effect of changing the probability that the tree is too dry on the computed belief that the tree is sick, given that the tree is losing its leaves.  In the framework given above, (1) $A$ is the node \emph{Sick} and $a$ is the state \emph{yes}, (2) the evidence is that the node \emph{Loses} has state \emph{yes}, and (3) $B$ is the node \emph{Dry} and $b_{i}$ is the state \emph{yes}.  First, use the \texttt{get.sensitivity} function to compute the parameters of the sensitivity function.

<<>>=
params <- get.sensitivity(apple, "Sick", "yes", Dry = "yes")
params
@

Define the sensitivity function

<<>>=
sensitivity.func <- function(x, alpha, beta, gamma, delta)
  (alpha * x + beta) / (gamma * x + delta)
@

and plot the sensitivity curve for $x = \Prob(Dry = yes)$ ranging from $0.025$~to~$0.2$.

<<eval=FALSE>>=
x <- seq(0.025, 0.2, by = 0.001)
y <- sensitivity.func(x, params[1], params[2], params[3], params[4])
plot(x, y)
@

<<echo=FALSE,results=hide>>=
pdf(file = "sweavedImages/sensitivity.pdf", height = 4.5, width = 6)
x <- seq(0.025, 0.2, by = 0.001)
y <- sensitivity.func(x, params[1], params[2], params[3], params[4])
plot(x, y, type = "l", ylim = c(0,1), xlab = "P(Dry = \"yes\")",
     ylab = "P(Sick = \"yes\" | Loses = \"yes\")", axes = FALSE)
axis(1)
axis(2, las = 1)
box()
points(0.1, get.belief(apple, "Sick")["yes"], pch = 16)
dev.off()
@

The sensitivity plot is shown in Figure~\ref{fig:sensitvity}.

%\section{Conclusion}

%This paper introduced \pkg{RHugin}, a package for building and making inference from Bayesian networks in \proglang{R}.  By providing an \proglang{R} API for the Hugin Decision Engine\textsuperscript{\textregistered}, the \pkg{RHugin} package makes the state-of-the-art in Bayesian network software available to \proglang{R} users.  Additionally, the \pkg{RHugin} package makes the advanced features of the Hugin Decision Engine\textsuperscript{\textregistered}, which are otherwise only accessible through the low-level \proglang{C}, \proglang{C++} and \proglang{Java} APIs, accessible to Hugin users in a user-friendly, high-level programming environment.

\bibliography{RHugin}
\bibliographystyle{plainnat}

\end{document}


